// Data model for SIM Card Record
// Maps between domain entity and Supabase data structure

import '../../domain/entities/sim_card_record.dart';

class SimCardRecordModel extends SimCardRecord {
  const SimCardRecordModel({
    required super.id,
    required super.userId,
    required super.phoneNumber,
    required super.simNickname,
    required super.telecomProvider,
    super.officialRegisteredName,
    required super.createdAt,
    required super.updatedAt,
  });

  /// Create SimCardRecordModel from JSON (Supabase response)
  factory SimCardRecordModel.fromJson(Map<String, dynamic> json) {
    _validateJsonInput(json);
    return SimCardRecordModel(
      id: json['id'] as String,
      userId: json['user_id'] as String,
      phoneNumber: json['phone_number'] as String,
      simNickname: json['sim_nickname'] as String,
      telecomProvider: json['telecom_provider'] as String,
      officialRegisteredName: json['official_registered_name'] as String?,
      createdAt: DateTime.parse(json['created_at'] as String),
      updatedAt: DateTime.parse(json['updated_at'] as String),
    );
  }

  /// Validates JSON input for required fields and data types
  static void _validateJsonInput(Map<String, dynamic> json) {
    if (json['id'] == null || json['id'].toString().isEmpty) {
      throw ArgumentError('SIM card ID cannot be null or empty');
    }
    if (json['user_id'] == null || json['user_id'].toString().isEmpty) {
      throw ArgumentError('User ID cannot be null or empty');
    }
    if (json['phone_number'] == null || json['phone_number'].toString().isEmpty) {
      throw ArgumentError('Phone number cannot be null or empty');
    }
    if (json['sim_nickname'] == null || json['sim_nickname'].toString().isEmpty) {
      throw ArgumentError('SIM nickname cannot be null or empty');
    }
    if (json['telecom_provider'] == null || json['telecom_provider'].toString().isEmpty) {
      throw ArgumentError('Telecom provider cannot be null or empty');
    }
    
    // Validate Ethiopian phone number format
    final phoneNumber = json['phone_number'].toString();
    final ethiopianPhoneRegex = RegExp(r'^(\+251|0)[97]\d{8}$');
    if (!ethiopianPhoneRegex.hasMatch(phoneNumber)) {
      throw ArgumentError('Invalid Ethiopian phone number format: $phoneNumber');
    }
    
    // Validate SIM nickname length
    final nickname = json['sim_nickname'].toString();
    if (nickname.length < 2 || nickname.length > 50) {
      throw ArgumentError('SIM nickname must be between 2 and 50 characters');
    }
  }

  /// Convert SimCardRecordModel to JSON (for Supabase insert/update)
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'user_id': userId,
      'phone_number': phoneNumber,
      'sim_nickname': simNickname,
      'telecom_provider': telecomProvider,
      'official_registered_name': officialRegisteredName,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
    };
  }

  /// Create SimCardRecordModel from domain entity
  factory SimCardRecordModel.fromEntity(SimCardRecord entity) {
    return SimCardRecordModel(
      id: entity.id,
      userId: entity.userId,
      phoneNumber: entity.phoneNumber,
      simNickname: entity.simNickname,
      telecomProvider: entity.telecomProvider,
      officialRegisteredName: entity.officialRegisteredName,
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
    );
  }

  /// Convert to domain entity
  SimCardRecord toEntity() {
    return SimCardRecord(
      id: id,
      userId: userId,
      phoneNumber: phoneNumber,
      simNickname: simNickname,
      telecomProvider: telecomProvider,
      officialRegisteredName: officialRegisteredName,
      createdAt: createdAt,
      updatedAt: updatedAt,
    );
  }

  /// Create SimCardRecordModel for new insert (without ID, generates timestamps)
  factory SimCardRecordModel.forInsert({
    required String userId,
    required String phoneNumber,
    required String simNickname,
    required String telecomProvider,
    String? officialRegisteredName,
  }) {
    final now = DateTime.now();
    return SimCardRecordModel(
      id: '', // Will be generated by Supabase
      userId: userId,
      phoneNumber: phoneNumber,
      simNickname: simNickname,
      telecomProvider: telecomProvider,
      officialRegisteredName: officialRegisteredName,
      createdAt: now,
      updatedAt: now,
    );
  }

  /// Create JSON for insert (excludes ID and includes current timestamps)
  Map<String, dynamic> toInsertJson() {
    final now = DateTime.now().toIso8601String();
    return {
      'user_id': userId,
      'phone_number': phoneNumber,
      'sim_nickname': simNickname,
      'telecom_provider': telecomProvider,
      'official_registered_name': officialRegisteredName,
      'created_at': now,
      'updated_at': now,
    };
  }

  /// Alias for toInsertJson() to match repository expectations
  Map<String, dynamic> toJsonForInsert() => toInsertJson();

  /// Create JSON for update (excludes ID and user_id, updates timestamp)
  Map<String, dynamic> toUpdateJson() {
    return {
      'phone_number': phoneNumber,
      'sim_nickname': simNickname,
      'telecom_provider': telecomProvider,
      'official_registered_name': officialRegisteredName,
      'updated_at': DateTime.now().toIso8601String(),
    };
  }

  /// Create SimCardRecordModel for update (preserves ID, userId, createdAt)
  SimCardRecordModel copyWithUpdate({
    String? phoneNumber,
    String? simNickname,
    String? telecomProvider,
    String? officialRegisteredName,
  }) {
    return SimCardRecordModel(
      id: id,
      userId: userId,
      phoneNumber: phoneNumber ?? this.phoneNumber,
      simNickname: simNickname ?? this.simNickname,
      telecomProvider: telecomProvider ?? this.telecomProvider,
      officialRegisteredName: officialRegisteredName ?? this.officialRegisteredName,
      createdAt: createdAt, // Preserve original created date
      updatedAt: DateTime.now(), // Update timestamp
    );
  }

  @override
  String toString() {
    return 'SimCardRecordModel(id: $id, phoneNumber: $phoneNumber, nickname: $simNickname, provider: $telecomProvider)';
  }
}